@using Vindo.BackOfficeUI.Models.Colors
@using Vindo.BackOfficeUI.Models.Tables
<div class="box">
	<div class="box-header">
		<h4 class="box-title">@Title</h4>
	</div>
	<div class="box-body">
		<div class="table-responsive">
			<table class="table mb-0">
				<thead class="thead-light">
					<tr>

						@foreach (var item in Data.Headers)
						{
							<th>@item</th>
						}

						@if (ShowActions)
						{
							<th>Actions</th>
						}

					</tr>
				</thead>

				<tbody>
							

					@for (int i = 0; i < Data.Records.Count; i++)
					{
						var columns = Data.Records[i];
						<tr>
							@foreach (var column in columns)
							{
								<td>@RenderCell(column)</td>
							}
							@if (ShowActions)
							{
								<td>@TableActions![i]</td>
							}
						</tr>
					}
					
				</tbody>
			</table>
		</div>
	</div><!--end card-body-->
</div>

@code {

	[Parameter]
	public TableData Data { get; set; } = null!;
	[Parameter]
	public string Title { get; set; } = null!;

	[Parameter]
	public IList<TableAction>? TableActions { get; set; }

	public bool ShowActions { get { return TableActions is not null && TableActions.Count > 0; } }

	private RenderFragment RenderCell(CellContent cell)
	{
		string? cellContent = cell.Content;

		switch (cell.CellType)
		{
			case CellType.Text:
			default:
				return builder =>
				{
					builder.AddContent(0, cellContent);
				};
			case CellType.Image:
				return builder =>
				{
					builder.OpenElement(0, "td");
					builder.OpenElement(1, "img");
					builder.AddAttribute(2, "src", cellContent);
					builder.AddAttribute(3, "alt", "Image");
					builder.AddAttribute(4, "class", "avatar-sm rounded-circle mr-2");
					builder.CloseElement();
					builder.CloseElement();
				};
			case CellType.Badge:
				return builder =>
					{
						builder.OpenElement(0, "td");
						builder.OpenElement(1, "span");
						builder.AddAttribute(2, "class", GetBadgeClassName(cell.ColorMood));
						builder.AddContent(4, cellContent);			
						builder.CloseElement();
						builder.CloseElement();
					};

		}
	}

	private string GetBadgeClassName(ColorMood? mood)
	{
		if(mood is null)
		{
			return string.Empty;
		}
		return $"badge badge-{mood.ToString()!.ToLower()}";
	}

}
